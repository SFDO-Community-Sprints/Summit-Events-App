// Copyright 2019 University of St. Thomas - Minnesota. All rights reserved.
// Use of this source code is governed by a BSD Revised
// license that can be found in the LICENSE file.
// Created by Thaddaeus Dahlberg on 6/12/2018.

@IsTest
public with sharing class SummitEventsShared_TEST {

    /**

    Data Factory Methods:

    createTestEvent(String recType, String testEventName, String audience, Boolean includeAppt, Boolean includeAddQuestions)
        - Returns Event Instance
    createContact(String firstName, String preferredFirst, String lastName, String Email, String Zip, String Phone, String DOB, String ClassYear)
        - Returns contact
    createUserByContactId(Id cId)
        - Returns user
    createEventRegistration(Summit_Events_Instance__c evtI, String firstName, String lastName, String Email, String Zip, String DOB, String ClassYear)
        - Returns Event Registration
    createEventRegistrationObj(String firstName, String preferredFirst, String lastName, String Email, String Zip, String Phone, String DOB, String ClassYear)
        -Returns Event Registration Object
    createTestTransactionEmail(Id evtId, String status)
        -Returns Summit_Events_Email__c

     **/

//    @IsTest static void testBlankEvent() {
//        Test.startTest();
//        //Making bad cookies for exceptions
//        SummitEventsShared SEShared = new SummitEventsShared();
//        SummitEventsRegisterController registerCtrl = new SummitEventsRegisterController();
//        SEShared.createEncryptedCookie('','','','');
//        SEShared.getSummitEventsInfo();
//        registerCtrl = new SummitEventsRegisterController();
//        PageReference pageRef = Page.SummitEventsCancelReview;
//        Test.setCurrentPage(pageRef);
//        registerCtrl.checkEventDetails();
//        registerCtrl.checkEventDetails();
//        Test.stopTest();
//    }

//    @IsTest static void testMatching2() {
//        //Insert a test event
//        SummitEventsTestSharedDataFactory.createContact('MatchFirst', 'Match', 'MatchLast', 'match@valleyhill.net', '55555', '(555) 555-5555', '1971-03-22', '2012');
//        Summit_Events_Instance__c evtInst = SummitEventsTestSharedDataFactory.createTestEvent('Use Salesforce Duplicate Rule', 'Test Event', '', true, true, '');
//
//        Test.startTest();
//        //Add instance ID to register page
//        PageReference pageRef = Page.SummitEventsRegister;
//        Test.setCurrentPage(pageRef);
//        ApexPages.currentPage().getParameters().put('instanceID', evtInst.Id);
//        SummitEventsRegisterController registerCtrl = new SummitEventsRegisterController();
//
//        //Blank registration
//        registerCtrl.eventRegistration = SummitEventsTestSharedDataFactory.createEventRegistrationObj('TestFirst', '', 'TestLast', '', '', '', '', '2002');
//        registerCtrl.saveContactRegistration();
//
//        //Create a new contact
//        registerCtrl.eventRegistration = SummitEventsTestSharedDataFactory.createEventRegistrationObj('TestFirst', 'Test', 'TestLast', 'test@valleyhill.net', '55418', '(555) 444-4444', '1989-03-22', '2002');
//        registerCtrl.saveContactRegistration();
//
//        //Hard test on LAST NAME, EMAIL, CLASS
//        registerCtrl.eventRegistration = SummitEventsTestSharedDataFactory.createEventRegistrationObj('TestFirst', 'Test', 'MatchLast', 'match@valleyhill.net', '55418', '(555) 444-4444', '1989-03-22', '2012');
//        registerCtrl.saveContactRegistration();
//
//        ///Hard test on LAST NAME, FIRST NAME, EMAIL
//        registerCtrl.eventRegistration = SummitEventsTestSharedDataFactory.createEventRegistrationObj('MatchFirst', 'Match', 'MatchLast', 'match@valleyhill.net', '55418', '(555) 444-4444', '1989-03-22', '2002');
//        registerCtrl.saveContactRegistration();
//
//        //Hard test on LAST NAME, CLASS, FIRST NAME, PHONE
//        registerCtrl.eventRegistration = SummitEventsTestSharedDataFactory.createEventRegistrationObj('MatchFirst', 'Test', 'MatchLast', 'test@valleyhill.net', '55418', '(555) 555-5555', '1989-03-22', '2012');
//        registerCtrl.saveContactRegistration();
//
//        //Soft Match on Last Name
//        registerCtrl.eventRegistration = SummitEventsTestSharedDataFactory.createEventRegistrationObj('TestFirst', 'Test', 'MatchLast', 'test@valleyhill.net', '55418', '(555) 444-4444', '1989-03-22', '2002');
//        registerCtrl.saveContactRegistration();
//
//        //Soft Match LAST NAME, PHONE and CLASS
//        registerCtrl.eventRegistration = SummitEventsTestSharedDataFactory.createEventRegistrationObj('TestFirst', 'Test', 'MatchLast', 'test@valleyhill.net', '55418', '(555) 555-5555', '1989-03-22', '2012');
//        registerCtrl.saveContactRegistration();
//
//        Test.stopTest();
//    }

//    @IsTest static void testNoMatchGraduate() {
//        //Insert a test event
//        Summit_Events_Instance__c evtInst = SummitEventsTestSharedDataFactory.createTestEvent('Use Salesforce Duplicate Rule', 'Test Event', '', true, true, '');
//        Test.startTest();
//        //Add instance ID to register page
//        PageReference pageRef = Page.SummitEventsRegister;
//        Test.setCurrentPage(pageRef);
//        ApexPages.currentPage().getParameters().put('instanceID', evtInst.Id);
//        SummitEventsRegisterController registerCtrl = new SummitEventsRegisterController();
//        registerCtrl.eventRegistration = SummitEventsTestSharedDataFactory.createEventRegistrationObj('Graduate', 'Test', 'Master', 'graduate@valleyhill.net', '55555', '(555) 555-5555', '1989-03-22', '2014');
//        registerCtrl.saveContactRegistration();
//
//        //Run same registration again for reg Id match
//        registerCtrl.saveContactRegistration();
//
//        Test.stopTest();
//    }


//    @IsTest static void testMatching1() {
//        //Insert a test event
//        SummitEventsTestSharedDataFactory.createContact('MatchFirst', 'Match', 'MatchLast', 'match@valleyhill.net', '55555', '(555) 555-5555', '1971-03-22', '2012');
//        Summit_Events_Instance__c evtInst = SummitEventsTestSharedDataFactory.createTestEvent('Use Salesforce Duplicate Rule', 'Test Event', 'High School Senior', true, true, '');
//
//        Test.startTest();
//        //Add instance ID to register page
//        PageReference pageRef = Page.SummitEventsRegister;
//        Test.setCurrentPage(pageRef);
//        ApexPages.currentPage().getParameters().put('instanceID', evtInst.Id);
//        ApexPages.currentPage().getParameters().put('audience', 'High School Senior');
//        SummitEventsRegisterController registerCtrl = new SummitEventsRegisterController();
//
//        //Blank registration
//        registerCtrl.eventRegistration = SummitEventsTestSharedDataFactory.createEventRegistrationObj('TestFirst', '', 'TestLast', '', '', '', '', '2002');
//        registerCtrl.saveContactRegistration();
//
//        //No Match create a new contact
//        registerCtrl.eventRegistration = SummitEventsTestSharedDataFactory.createEventRegistrationObj('TestFirst', 'Test', 'TestLast', 'test@valleyhill.net', '55418', '(555) 444-4444', '1989-03-22', '2002');
//        registerCtrl.saveContactRegistration();
//
//        // Hard Match on Last Name Email
//        registerCtrl.eventRegistration = SummitEventsTestSharedDataFactory.createEventRegistrationObj('TestFirst', 'Test', 'MatchLast', 'match@valleyhill.net', '55418', '(555) 444-4444', '1989-03-22', '2002');
//        registerCtrl.saveContactRegistration();
//
//        //Hard Match on First 3 letters of first name / preferred first name, last name, and birthdate
//        registerCtrl.eventRegistration = SummitEventsTestSharedDataFactory.createEventRegistrationObj('MatchFirst', 'Match', 'MatchLast', 'match@valleyhill.net', '55418', '(555) 444-4444', '1971-03-22', '2002');
//        registerCtrl.saveContactRegistration();
//
//        //Soft Match with Last Name, First Name, Zip
//        registerCtrl.eventRegistration = SummitEventsTestSharedDataFactory.createEventRegistrationObj('MatchFirst', 'Test', 'MatchLast', 'test@valleyhill.net', '55555', '(555) 444-4444', '1989-03-22', '2002');
//        registerCtrl.saveContactRegistration();
//
//        //Soft Match found with email
//        registerCtrl.eventRegistration = SummitEventsTestSharedDataFactory.createEventRegistrationObj('TestFirst', 'Test', 'TestLast', 'match@valleyhill.net', '55418', '(555) 444-4444', '1989-03-22', '2002');
//        registerCtrl.saveContactRegistration();
//
//        //Run same registration again for reg Id match
//        PageReference newpg = registerCtrl.saveContactRegistration();
//        Test.setCurrentPage(newpg);
//
//        pageRef = Page.SummitEventsRegister;
//        Test.setCurrentPage(pageRef);
//        registerCtrl.saveContactRegistration();
//
//
//        Test.stopTest();
//    }

    @IsTest static void testRegPicklists() {
        Summit_Events_Instance__c evtInst = SummitEventsTestSharedDataFactory.createTestEvent('Use Salesforce Duplicate Rule', 'Test Event', '', true, true, 'One registration per instance');

        Test.startTest();
        //Add instance ID to register page
        PageReference pageRef = Page.SummitEventsRegister;
        Test.setCurrentPage(pageRef);
        ApexPages.currentPage().getParameters().put('instanceID', evtInst.Id);
        SummitEventsRegisterController registerController = new SummitEventsRegisterController();
        registerController.getSexDD();
        registerController.getStateDD();
        registerController.getCountryDD();
        registerController.getTimeFrame();
        registerController.getThirdPartyStatus();
        registerController.getApplicantTypeDD();
        registerController.getRelationshipDD();
        Test.stopTest();
    }

    @IsTest static void testEventWithEmailRestrictions() {
        Summit_Events_Instance__c evtInst = SummitEventsTestSharedDataFactory.createTestEvent('Use Salesforce Duplicate Rule', 'Test Event', '', true, true, 'One registration per instance');

        Test.startTest();
        //Add instance ID to register page
        PageReference pageRef = Page.SummitEventsRegister;
        Test.setCurrentPage(pageRef);
        ApexPages.currentPage().getParameters().put('instanceID', evtInst.Id);
        SummitEventsRegisterController registerCtrl = new SummitEventsRegisterController();
        registerCtrl.eventRegistration = SummitEventsTestSharedDataFactory.createEventRegistrationObj('TestFirst', 'Test', 'TestLast', 'test@valleyhill.net', '55418', '(555) 444-4444', '1989-03-22', '2002');
        registerCtrl.saveContactRegistration();
//        UST_Event_Registration__c evtReg2 = TestUSTEventSharedDataFactory.createEventRegistration(evtInst, 'TestFirst', 'TestLast', 'test@valleyhill.net', '55418', '1971-03-22', '2012', null);
        registerCtrl.saveContactRegistration();
        registerCtrl.eventRegistration.Registrant_Email__c = 'test2@valleyhill.net';
        registerCtrl.eventRegistration.Registrant_Date_of_Birth__c = Date.valueOf('1989-03-22');
        registerCtrl.saveContactRegistration();
        Test.stopTest();
    }

    @IsTest static void testRegAlreadyExists() {
        //Insert a test event
        SummitEventsTestSharedDataFactory.createContact('MatchFirst', 'Match', 'MatchLast', 'match@valleyhill.net', '55555', '(555) 555-5555', '1971-03-22', '2012');
        Summit_Events_Instance__c evtInst = SummitEventsTestSharedDataFactory.createTestEvent('Use Salesforce Duplicate Rule', 'Test Event', 'High School Senior', false, false, '');
        Summit_Events_Registration__c evtReg = SummitEventsTestSharedDataFactory.createEventRegistration(evtInst, 'MatchFirst', 'MatchLast', 'match@valleyhill.net', '55555', '1971-03-22', '2012', null);

        Test.startTest();
        SummitEventsShared SEShared = new SummitEventsShared();
        SEShared.createEncryptedCookie('High School Senior',evtInst.Id,evtInst.Event__c, evtReg.Id);

        SummitEventsRegisterController registerCtrl = new SummitEventsRegisterController();
        SEShared.createEncryptedCookie('High School Senior',evtInst.Id,evtInst.Event__c, '');

        registerCtrl = new SummitEventsRegisterController();
        registerCtrl.eventRegistration = SummitEventsTestSharedDataFactory.createEventRegistrationObj('MatchFirst', 'Match', 'MatchLast', 'match@valleyhill.net', '55555', '(555) 555-5555', '1971-03-22', '2012');
        registerCtrl.saveContactRegistration();


        registerCtrl.saveContactRegistration();
        Test.stopTest();
    }


    @IsTest static void testSubmit() {
        SummitEventsTestSharedDataFactory.createContact('TestFirst1', 'Test', 'TestLast1', 'test1@valleyhill.net', '55418', '(555) 555-5555', '1971-03-22', '2012');
        Summit_Events_Instance__c evtInst = SummitEventsTestSharedDataFactory.createTestEvent('Use Salesforce Duplicate Rule', 'Test Event', '', true, true, '');
        Summit_Events_Registration__c evtReg = SummitEventsTestSharedDataFactory.createEventRegistration(evtInst, 'TestFirst', 'TestLast', 'test@valleyhill.net', '55418', '1971-03-22', '2012', null);
        Test.startTest();
        PageReference pageRef = Page.SummitEventsSubmit;
        Test.setCurrentPage(pageRef);

        SummitEventsShared SEShared = new SummitEventsShared();
        SEShared.createEncryptedCookie('Transfer',evtInst.Id,evtInst.Event__c, evtReg.Id);

        //ApexPages.currentPage().getParameters().put('instanceID', evtInst.Id);
        SummitEventsSubmitController submitCtrl = new SummitEventsSubmitController();
        submitCtrl.checkEventDetails();
        submitCtrl.previousPage();
        submitCtrl.submitRegistration();
    }

    @IsTest static void testRegWithOptions() {
        SummitEventsTestSharedDataFactory.createContact('TestFirst1', 'Test', 'TestLast1', 'test1@valleyhill.net', '55418', '(555) 555-5555', '1971-03-22', '2012');
        Summit_Events_Instance__c evtInst = SummitEventsTestSharedDataFactory.createTestEvent('Use Salesforce Duplicate Rule', 'Test Event', '', true, true, '');
        Summit_Events_Registration__c evtReg = SummitEventsTestSharedDataFactory.createEventRegistration(evtInst, 'TestFirst', 'TestLast', 'test@valleyhill.net', '55418', '1971-03-22', '2012', null);

        Test.startTest();
        SummitEventsRegisterAppointmentCtlr optionsCtrl = new SummitEventsRegisterAppointmentCtlr();

        SummitEventsShared SEShared = new SummitEventsShared();
        SEShared.createEncryptedCookie('Transfer',evtInst.Id,evtInst.Event__c, evtReg.Id);

        optionsCtrl = new SummitEventsRegisterAppointmentCtlr();

        //optionsCtrl.checkEventDetails();
        optionsCtrl.previousPage();

        optionsCtrl.incomingAppointmentJSON = '[]';
        optionsCtrl.saveOptions();

        //[{"apptId":"a010m000003EibeAAC","apptCategory":"","apptType":"","apptText":"","apptTitle":"Multi colored socks for everyone"},{"apptId":"a010m000003EibUAAS","apptCategory":"","apptType":"","apptText":"","apptTitle":"Red Socks Only"}]

        List<Summit_Events_Appointment_Type__c> newApptTypes = [SELECT Id, Title__c FROM Summit_Events_Appointment_Type__c WHERE Summit_Events__c = :evtInst.Event__c];
        String jsonAppts = '[';
        for (Summit_Events_Appointment_Type__c at : newApptTypes) {
            jsonAppts += '{"apptId":"' + at.Id + '","apptCategory":"","apptType":"","apptText":"","apptTitle":"' + at.Title__c + '"},';
        }
        jsonAppts = jsonAppts.removeEnd(',');
        jsonAppts += ']';
        optionsCtrl.incomingAppointmentJSON = jsonAppts;
        optionsCtrl.saveOptions();

        //run constructor again to simulate page load after save
        evtReg.UG_Event_Appointments__r.add(new Summit_Events_Appointments__c(Client_Created_Appointment__c = true));
        optionsCtrl = new SummitEventsRegisterAppointmentCtlr();
        Test.stopTest();
    }

    @IsTest static void testRegCancel() {
        Summit_Events_Instance__c evtInst = SummitEventsTestSharedDataFactory.createTestEvent('Use Salesforce Duplicate Rule', 'Test Event', '', true, true, '');
        Summit_Events_Registration__c evtReg = SummitEventsTestSharedDataFactory.createEventRegistration(evtInst, 'TestFirst', 'TestLast', 'test@valleyhill.net', '55418', '1971-03-22', '2012', null);

        Test.startTest();
        PageReference pageRef = Page.SummitEventsCancelReview;
        Test.setCurrentPage(pageRef);
        ApexPages.currentPage().getParameters().put('regId', evtReg.Id);
        SummitEventsCancelReviewController cancelReviewCtrl = new SummitEventsCancelReviewController();
        cancelReviewCtrl.cancelRegistration();
        Test.stopTest();
    }

    @IsTest static void testRegConfirmationPage() {
        Summit_Events_Instance__c evtInst = SummitEventsTestSharedDataFactory.createTestEvent('Use Salesforce Duplicate Rule', 'Test Event', '', true, true, '');
        Summit_Events_Registration__c evtReg = SummitEventsTestSharedDataFactory.createEventRegistration(evtInst, 'TestFirst', 'TestLast', 'test@valleyhill.net', '55418', '1971-03-22', '2012', null);

        Test.startTest();
        SummitEventsShared SEShared = new SummitEventsShared();
        SEShared.createEncryptedCookie('',evtInst.Id,evtInst.Event__c, evtReg.Id);

        SummitEventsConfirmationController confirmCtrl = new SummitEventsConfirmationController();
        SEShared.createEncryptedCookie('',evtInst.Id,evtInst.Event__c, evtReg.Id);

        confirmCtrl.checkEventDetails();
        Test.stopTest();
    }

    @IsTest static void testParkingPass() {
        Summit_Events_Instance__c evtInst = SummitEventsTestSharedDataFactory.createTestEvent('Use Salesforce Duplicate Rule', 'Test Event', '', true, true, '');
        Summit_Events_Registration__c evtReg = SummitEventsTestSharedDataFactory.createEventRegistration(evtInst, 'TestFirst', 'TestLast', 'test@valleyhill.net', '55418', '1971-03-22', '2012', null);
        evtReg.Status__c = 'Registered';
        update evtReg;
        Test.startTest();
        SummitEventsParkingPassController parkingCtrl = new SummitEventsParkingPassController();
        ApexPages.currentPage().getParameters().put('regId', evtReg.Id);
        parkingCtrl = new SummitEventsParkingPassController();
        upsert evtReg;
        parkingCtrl = new SummitEventsParkingPassController();
        Test.stopTest();
    }

    @IsTest static void testEventFeed() {
        Summit_Events_Instance__c evtInst = SummitEventsTestSharedDataFactory.createTestEvent('Use Salesforce Duplicate Rule', 'Test Event', 'Alumni', true, true, '');

        Test.startTest();
        RestRequest req = new RestRequest();
        RestResponse res = new RestResponse();
        req.requestURI = '/services/apexrest/summiteventfeed';
        req.httpMethod = 'GET';
        req.addHeader('Content-Type', 'application/json');

        //Test audience dd request
        req.params.put('feedType', 'audienceDD');
        RestContext.request = req;
        RestContext.response = res;
        SummitEventsFeed.getSummitEventsFeed();

        //Test sex dd request
        req.params.remove('feedType');
        req.params.put('feedType', 'sexDD');
        RestContext.request = req;
        SummitEventsFeed.getSummitEventsFeed();

        //test filter minus dates
        req.params.remove('feedType');
        req.params.put('feedType', 'eventList');
        RestContext.request = req;
        SummitEventsFeed.getSummitEventsFeed();

        //test filter minus dates
        req.params.remove('feedType');
        req.params.put('feedType', 'eventList');
        req.params.put('eventId', evtInst.Id);
        req.params.put('sponsor', 'Big Business');
        req.params.put('longdesc', 'true');
        RestContext.request = req;
        SummitEventsFeed.getSummitEventsFeed();
        req.params.put('eventId', 'WRONG!');
        RestContext.request = req;
        SummitEventsFeed.getSummitEventsFeed();

        //test filter with start date
        req.params.put('viewStart', String.valueOf(Datetime.now().addMonths(-1)));
        RestContext.request = req;
        SummitEventsFeed.getSummitEventsFeed();

        //test filter with end date
        req.params.put('viewEnd', String.valueOf(Datetime.now().addMonths(1)));
        req.params.put('audience', 'Alumni');
        RestContext.request = req;
        SummitEventsFeed.getSummitEventsFeed();

        //test filter
        req.params.put('filter', 'OCB');
        RestContext.request = req;
        SummitEventsFeed.getSummitEventsFeed();

        //test filter
        req.params.put('rectype', 'UDAR');
        req.params.put('callback', 'UDAR');
        RestContext.request = req;
        SummitEventsFeed.getSummitEventsFeed();
        Test.stopTest();

    }

    @IsTest static void testLetterheadLookup() {
        Summit_Events_Instance__c evtInst = SummitEventsTestSharedDataFactory.createTestEvent('Use Salesforce Duplicate Rule', 'Test Event', '', true, true, '');
        SummitEventsTestSharedDataFactory.createEventRegistration(evtInst, 'TestFirst', 'TestLast', 'test@valleyhill.net', '55418', '1971-03-22', '2012', null);
        Summit_Events_Email__c testEvtEmail = SummitEventsTestSharedDataFactory.createTestTransactionEmail(evtInst, 'Registered', '');

        Test.startTest();
        ApexPages.StandardController sc = new ApexPages.StandardController(testEvtEmail);
        SummitEventsLetterheadLookupExtension emailController = new SummitEventsLetterheadLookupExtension(sc);
        emailController.getOrgWideEmail();
        emailController.getLetterheads();

        //Create fake brandTemplate since SF won't let you insert one
        BrandTemplate fakeBrandTemplate = new BrandTemplate(
                Id = SummitEventsTestSharedDataFactory.getFakeId(BrandTemplate.SObjectType),
                Name = 'Test',
                Value = '<body class="setupTab" ><style background-color="#FFFFFF" bEditID="b1st1" bLabel="body" ></style><center ><table cellpadding="0" width="500" cellspacing="0" id="topTable" height="450" ><tr valign="top" ><td ><style background-color="#FFFFFF" bEditID="r1st1" bLabel="header" vertical-align="top" height="5" text-align="left" ></style><img border="0" bEditID="r1sp1" bLabel="headerImage" id="r1sp1"><![CDATA[/servlet/servlet.ImageServer?id=0150m000000AN8V&oid=00D0m000000Cra6]]></img></td></tr><tr valign="top" ><td ><style background-color="#6600CC" bEditID="r2st1" bLabel="accent1" height="5" ></style><![CDATA[]]></td></tr><tr valign="top" ><td styleInsert="1" height="300" ><style background-color="#FFFFFF" bEditID="r3st1" color="#000000" bLabel="main" font-size="12pt" font-family="arial" ></style><![CDATA[]]></td></tr><tr valign="top" ><td ><style background-color="#6600CC" bEditID="r4st1" bLabel="accent2" height="5" ></style><![CDATA[]]></td></tr><tr valign="top" ><td ><style background-color="#FFFFFF" bEditID="r5st1" bLabel="footer" vertical-align="top" height="125" text-align="left" ></style><img border="0" bEditID="r5sp1" bLabel="footerImage" id="r5sp1"><![CDATA[/servlet/servlet.ImageServer?id=0150m000000AN8U&oid=00D0m000000Cra6]]></img></td></tr><tr valign="top" ><td ><style background-color="#FFFFFF" bEditID="r6st1" bLabel="accent3" height="5" ></style><![CDATA[]]></td></tr></table></center></body>'
        );
        emailController.brandTemplates = new Map<Id, BrandTemplate>();
        emailController.brandTemplates.put(fakeBrandTemplate.Id, fakeBrandTemplate);
        emailController.SummitEvt.Letterhead_Id__c = fakeBrandTemplate.Id;


        OrgWideEmailAddress fakeOrgWideEmailAddress = new OrgWideEmailAddress (
                Id = SummitEventsTestSharedDataFactory.getFakeId(OrgWideEmailAddress.SObjectType),
                Address = 'thad+owe@valleyhill.net',
                DisplayName = 'Test'
        );
        emailController.oweList = new Map<Id, OrgWideEmailAddress>();
        emailController.oweList.put(fakeOrgWideEmailAddress.Id, fakeOrgWideEmailAddress);
        emailController.SummitEvt.Org_Email_Id__c = fakeOrgWideEmailAddress.Id;
        emailController.save();
        Test.stopTest();
    }

    //Test the add to calendar page
    @IsTest static void testSEAddToCalendar() {
        Summit_Events_Instance__c evtInst = SummitEventsTestSharedDataFactory.createTestEvent('Use Salesforce Duplicate Rule', 'Overnight Event', '', true, true, '');

        Test.startTest();
        ApexPages.currentPage().getParameters().put('instanceID', evtInst.Id);
        new SummitEventsAddToCalendarController();
        Test.stopTest();
    }


    //Test the add to calendar page
    @IsTest static void testSEHostAssignment() {
        Summit_Events_Instance__c evtInst = SummitEventsTestSharedDataFactory.createTestEvent('Use Salesforce Duplicate Rule', 'Overnight Event', '', true, true, '');
        Summit_Events_Registration__c evtReg = SummitEventsTestSharedDataFactory.createEventRegistration(evtInst, 'TestFirst', 'TestLast', 'test@valleyhill.net', '55418', '1971-03-22', '2012', null);

        Test.startTest();
        // ApexPages.currentPage().getParameters().put('instanceID', testInstance.Id);
        List<Summit_Events_Appointments__c> updateRegAppt = [SELECT Id, Event_Registration__r.Event_Instance__r.Id, Event_Host__c FROM Summit_Events_Appointments__c WHERE Event_Registration__c = :evtReg.Id];
        ApexPages.StandardController sc = new ApexPages.StandardController(updateRegAppt[0]);
        SummitEventsHostAssignmentExtension hostController = new SummitEventsHostAssignmentExtension(sc);
        hostController.getRecordTypes();
        hostController.getListHost();
        hostController.assignHost();

        List<Summit_Events_Host__c> testHosts = [SELECT Id FROM Summit_Events_Host__c WHERE Event_Instance__c = :evtInst.Id];
        //Assign a host from test data
        hostController.hostId = testHosts[0].Id;
        hostController.hostAction = 'assign';
        hostController.assignHost();
        //Get list with already assigned host
        hostController.getListHost();

        //Unassign current host
        hostController.hostId = testHosts[0].Id;
        hostController.hostAction = 'unassign';
        hostController.assignHost();

        //Assign a host with capacity reached
        hostController.hostId = testHosts[1].Id;
        hostController.hostAction = 'assign';
        hostController.assignHost();

        Test.stopTest();
    }


    //Test itinerary printout
    @IsTest static void testItineraryPrint() {
        Summit_Events_Instance__c evtInst = SummitEventsTestSharedDataFactory.createTestEvent('Use Salesforce Duplicate Rule', 'Overnight Event', '', true, true, '');
        Summit_Events_Registration__c evtReg = SummitEventsTestSharedDataFactory.createEventRegistration(evtInst, 'TestFirst', 'TestLast', 'test@valleyhill.net', '55418', '1971-03-22', '2012', null);

        Test.startTest();

        // ApexPages.currentPage().getParameters().put('instanceID', testInstance.Id);
        List<Summit_Events_Appointments__c> updateRegAppt = [SELECT Id, Event_Registration__r.Event_Instance__r.Id, Event_Host__c FROM Summit_Events_Appointments__c WHERE Event_Registration__c = :evtReg.Id];
        ApexPages.StandardController sc = new ApexPages.StandardController(updateRegAppt[0]);
        SummitEventsHostAssignmentExtension hostController = new SummitEventsHostAssignmentExtension(sc);
        hostController.getRecordTypes();
        hostController.getListHost();
        hostController.assignHost();

        List<Summit_Events_Host__c> testHosts = [SELECT Id FROM Summit_Events_Host__c WHERE Event_Instance__c = :evtInst.Id];
        //Assign a host from test data
        hostController.hostId = testHosts[0].Id;
        hostController.hostAction = 'assign';
        hostController.assignHost();
        //Get list with already assigned host
        hostController.getListHost();

        //Unassign current host
        hostController.hostId = testHosts[0].Id;
        hostController.hostAction = 'unassign';
        hostController.assignHost();

        //Assign a host with capacity reached
        hostController.hostId = testHosts[1].Id;
        hostController.hostAction = 'assign';
        hostController.assignHost();

        List<Summit_Events_Appointments__c> dataApptAdd = new List<Summit_Events_Appointments__c>();
        dataApptAdd.add(
                new Summit_Events_Appointments__c(
                        Id = updateRegAppt[0].Id,
                        Appointment_Status__c = 'Confirmed',
                        Faculty_Staff_Member__c = 'Big Top',
                        Event_Host__c = testHosts[0].Id,
                        Appointment_Time__c = Time.newInstance(14, 30, 0, 0)
                )
        );
        dataApptAdd.add(
                new Summit_Events_Appointments__c(
                        Id = updateRegAppt[1].Id,
                        Appointment_Status__c = 'Confirmed',
                        Room__c = 'TEST ROOM',
                        Faculty_Staff_Member__c = 'Big Top',
                        Appointment_Time__c = Time.newInstance(16, 30, 0, 0)
                )
        );
        update dataApptAdd;


        ApexPages.StandardController sc2 = new ApexPages.StandardController(evtInst);
        SummitEventsPrintItinerariesExtension itPrint = new SummitEventsPrintItinerariesExtension(sc2);
        itPrint.getChooseRender();
        itPrint.getIsItWord();
        itPrint.generateDoc();
        itPrint.generatePDF();

        itPrint = new SummitEventsPrintItinerariesExtension(sc2);
        itPrint.docName = 'admissOvernight';
        ApexPages.currentPage().getParameters().put('docType', 'word');
        itPrint.getChooseRender();
        itPrint.getIsItWord();
        itPrint.generateDoc();
        itPrint.generatePDF();
        //itPrint = new SummitEventsPrintItinerariesExtension(sc);
        Test.stopTest();
    }
}